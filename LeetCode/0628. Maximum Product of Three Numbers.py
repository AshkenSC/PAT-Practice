'''
0628. Maximum Product of Three Numbers

给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。

思路：
1. 数组中都是正数，取最大的三个数
2. 数组中都是负数，取大的三个数
3. 数组中有正有负，且负数不少于2个，必选最大正数，然后还需要比较最小两负数和第二第三大的正数，两个乘积谁更大
'''
from typing import List


class Solution:
    def maximumProduct(self, nums: List[int]) -> int:
        nums.sort()
        # 1. 数组中都是正数，取最大的三个数
        # 2. 数组中都是负数，取大的三个数
        if nums[0] >= 0 or nums[-1] <= 0:
            return nums[-1] * nums[-2] * nums[-3]
        # 3. 数组中有正有负，且负数不少于2个，
        # 必选最大正数，然后还需要比较最小两负数和第二第三大的正数，两个乘积谁更大
        elif nums[0] < 0 and nums[1] < 0:
            return nums[-1] * max(nums[0] * nums[1], nums[-2] * nums[-3])


sol = Solution()
print(sol.maximumProduct([-710,-107,-851,657,-14,-859,278,-182,-749,718,-640,127,-930,-462,694,969,143,309,904,-651,160,451,-159,-316,844,-60,611,-169,-73,721,-902,338,-20,-890,-819,-644,107,404,150,-219,459,-324,-385,-118,-307,993,202,-147,62,-94,-976,-329,689,870,532,-686,371,-850,-186,87,878,989,-822,-350,-948,-412,161,-88,-509,836,-207,-60,771,516,-287,-366,-512,509,904,-459,683,-563,-766,-837,-333,93,893,303,908,532,-206,990,280,826,-13,115,-732,525,-939,-787]))