<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="BranchesTreeState">
    <expand>
      <path>
        <item name="ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="LOCAL_ROOT" type="e8cecc67:BranchNodeDescriptor" />
      </path>
      <path>
        <item name="ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="REMOTE_ROOT" type="e8cecc67:BranchNodeDescriptor" />
      </path>
      <path>
        <item name="ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="REMOTE_ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="GROUP_NODE:origin" type="e8cecc67:BranchNodeDescriptor" />
      </path>
    </expand>
    <select />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="dad7d195-60a8-4ade-9dca-36f6267b8e9b" name="Default Changelist" comment="LeetCode 0046. Permutations&#10;&#10;思路：回溯法。&#10;将数组分为两个部分：已经排列的部分（设[0, first-1]）和还没排列的部分（设为[first, n-1]）。&#10;设当前要排列的数为first位，待填写的数下标为i，那么就将first和i位的数相交换，这样就当作[0, first]完成了交换，剩下没交换的位置位[first+1, n-1]。&#10;然后在此基础上进行递归。&#10;递归后将first和i位的数位置还原，再准备将first位与i+1位的数进行交换。">
      <change afterPath="$PROJECT_DIR$/LeetCode/!0022. Generate Parentheses.cpp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Python Script" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectId" id="1dgIfd4F1BcOXQ08DaCEshPQiQs" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="settings.editor.selected.configurable" value="preferences.lookFeel" />
  </component>
  <component name="RunManager" selected="Python.!0107. Binary Tree Level Order Traversal II.cpp">
    <configuration name="0067. Add Binary" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
      <module name="Programming-Practice" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/LeetCode" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/LeetCode/0067. Add Binary.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
      <option name="REDIRECT_INPUT" value="false" />
      <option name="INPUT_FILE" value="" />
      <method v="2" />
    </configuration>
    <configuration name="1021. Remove Outermost Parentheses" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
      <module name="Programming-Practice" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/LeetCode" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/LeetCode/1021. Remove Outermost Parentheses.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
      <option name="REDIRECT_INPUT" value="false" />
      <option name="INPUT_FILE" value="" />
      <method v="2" />
    </configuration>
    <configuration name="771. Jewels and Stones" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
      <module name="Programming-Practice" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/771. Jewels and Stones.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
      <option name="REDIRECT_INPUT" value="false" />
      <option name="INPUT_FILE" value="" />
      <method v="2" />
    </configuration>
    <configuration name="CollageCreator" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
      <module name="Programming-Practice" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$USER_HOME$/Desktop/zhizhi/task2" />
      <option name="IS_MODULE_SDK" value="false" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
      <option name="SCRIPT_NAME" value="$USER_HOME$/Desktop/zhizhi/task2/CollageCreator.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
      <option name="REDIRECT_INPUT" value="false" />
      <option name="INPUT_FILE" value="" />
      <method v="2" />
    </configuration>
    <configuration name="!0107. Binary Tree Level Order Traversal II.cpp" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
      <module name="Programming-Practice" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/LeetCode" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
      <option name="SCRIPT_NAME" value="D:\Projects\Programming-Practice\LeetCode\!0107. Binary Tree Level Order Traversal II.cpp" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
      <option name="REDIRECT_INPUT" value="false" />
      <option name="INPUT_FILE" value="" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Python.!0107. Binary Tree Level Order Traversal II.cpp" />
        <item itemvalue="Python.0067. Add Binary" />
        <item itemvalue="Python.771. Jewels and Stones" />
        <item itemvalue="Python.1021. Remove Outermost Parentheses" />
        <item itemvalue="Python.CollageCreator" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="dad7d195-60a8-4ade-9dca-36f6267b8e9b" name="Default Changelist" comment="LeetCode 0155. Min Stack&#10;&#10;Runtime:  76.69%&#10;Memory Usage: 13.63%&#10;&#10;更新了解题思路注释。" />
      <created>1592840413670</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1592840413670</updated>
      <workItem from="1592840418433" duration="1107000" />
      <workItem from="1592841541210" duration="1152000" />
      <workItem from="1593008417090" duration="2570000" />
      <workItem from="1593099565821" duration="1271000" />
      <workItem from="1593185147950" duration="1063000" />
      <workItem from="1593351688475" duration="462000" />
      <workItem from="1593359494180" duration="481000" />
      <workItem from="1593361386821" duration="2714000" />
      <workItem from="1593438900384" duration="3547000" />
      <workItem from="1593533776816" duration="606000" />
      <workItem from="1593609318686" duration="6618000" />
      <workItem from="1594056008172" duration="9645000" />
      <workItem from="1594362625792" duration="9141000" />
      <workItem from="1594432606839" duration="3315000" />
      <workItem from="1594437487887" duration="1000" />
      <workItem from="1594541728726" duration="4902000" />
      <workItem from="1594651244412" duration="7023000" />
      <workItem from="1594734949782" duration="3613000" />
      <workItem from="1594796365728" duration="35000" />
      <workItem from="1594823286571" duration="10300000" />
      <workItem from="1594993772935" duration="14274000" />
      <workItem from="1595044349352" duration="27912000" />
      <workItem from="1595233594494" duration="4726000" />
      <workItem from="1595258408072" duration="3464000" />
      <workItem from="1595385815109" duration="1000000" />
      <workItem from="1595515898075" duration="2691000" />
      <workItem from="1595604307592" duration="3163000" />
      <workItem from="1595683034118" duration="1306000" />
      <workItem from="1595775165983" duration="1495000" />
      <workItem from="1595833062363" duration="10597000" />
      <workItem from="1596072624778" duration="2751000" />
      <workItem from="1596339423850" duration="1216000" />
      <workItem from="1596373141725" duration="4393000" />
      <workItem from="1596446579569" duration="2140000" />
      <workItem from="1596554466783" duration="1042000" />
      <workItem from="1596619638224" duration="1996000" />
      <workItem from="1596816484193" duration="2965000" />
      <workItem from="1596856677818" duration="144000" />
      <workItem from="1596903208095" duration="1579000" />
      <workItem from="1596782660666" duration="1985000" />
      <workItem from="1596818317755" duration="3251000" />
      <workItem from="1597165723333" duration="667000" />
      <workItem from="1597342475947" duration="50000" />
      <workItem from="1597457154415" duration="6792000" />
      <workItem from="1597633411567" duration="238000" />
      <workItem from="1597678764083" duration="1871000" />
      <workItem from="1597714006701" duration="6374000" />
      <workItem from="1597973528251" duration="1821000" />
      <workItem from="1598406440699" duration="3228000" />
      <workItem from="1598549885323" duration="6638000" />
      <workItem from="1598875812080" duration="1439000" />
      <workItem from="1598880669409" duration="600000" />
      <workItem from="1598975840631" duration="145000" />
      <workItem from="1599047762065" duration="1169000" />
    </task>
    <task id="LOCAL-00029" summary="LeetCode 1512&#10;&#10;Runtime: 33.33%&#10;Memory Usage: 100.00%&#10;&#10;首先用一个字典，统计所有nums中出现过的数字他们的出现次数。&#10;然后遍历这个字典，对于出现次数&gt;=2的数字，如果出现了n次，那么就共有(n-1) + (n-2) + ... + 1对。">
      <created>1594653252543</created>
      <option name="number" value="00029" />
      <option name="presentableId" value="LOCAL-00029" />
      <option name="project" value="LOCAL" />
      <updated>1594653252543</updated>
    </task>
    <task id="LOCAL-00030" summary="LeetCode 0136&#10;&#10;Runtime: 28.68%&#10;Memory Usage: 77.35%&#10;&#10;遍历数组，用字典存储元素出现过的次数。">
      <created>1594653928216</created>
      <option name="number" value="00030" />
      <option name="presentableId" value="LOCAL-00030" />
      <option name="project" value="LOCAL" />
      <updated>1594653928216</updated>
    </task>
    <task id="LOCAL-00031" summary="LeetCode 0021&#10;&#10;通过了0/122个测试点。&#10;&#10;用两个指针分别指向l1, l2，逐个比较元素，将小的放入output。最后其中一个链表剩下的部分再接到output上。">
      <created>1594738054404</created>
      <option name="number" value="00031" />
      <option name="presentableId" value="LOCAL-00031" />
      <option name="project" value="LOCAL" />
      <updated>1594738054404</updated>
    </task>
    <task id="LOCAL-00032" summary="LeetCode 0021&#10;&#10;Runtime: 17.78%&#10;Memory Usage: 87.37%&#10;&#10;需要考虑l1,l2为空的情况。&#10;&#10;用两个指针分别指向l1, l2，逐个比较元素，将小的放入output。最后其中一个链表剩下的部分再接到output上。">
      <created>1594738300794</created>
      <option name="number" value="00032" />
      <option name="presentableId" value="LOCAL-00032" />
      <option name="project" value="LOCAL" />
      <updated>1594738300794</updated>
    </task>
    <task id="LOCAL-00033" summary="LeetCode 1290&#10;&#10;Runtime: 54.32%&#10;Memory Usage: 90.70%&#10;&#10;依次读取链表中的数值，每读一次前将结果乘以2，再加上当前位置。">
      <created>1594826532045</created>
      <option name="number" value="00033" />
      <option name="presentableId" value="LOCAL-00033" />
      <option name="project" value="LOCAL" />
      <updated>1594826532045</updated>
    </task>
    <task id="LOCAL-00034" summary="LeetCode 0028&#10;&#10;Runtime: 37.34%&#10;Memory Usage: 76.59%&#10;&#10;采用Sunday算法，注意考虑各种边界条件。">
      <created>1594922116928</created>
      <option name="number" value="00034" />
      <option name="presentableId" value="LOCAL-00034" />
      <option name="project" value="LOCAL" />
      <updated>1594922116928</updated>
    </task>
    <task id="LOCAL-00035" summary="LeetCode 0028&#10;&#10;Runtime: 21.81%&#10;Memory Usage: 82.88%&#10;&#10;遍历数组元素将其平方，然后排序即可。">
      <created>1594997976490</created>
      <option name="number" value="00035" />
      <option name="presentableId" value="LOCAL-00035" />
      <option name="project" value="LOCAL" />
      <updated>1594997976490</updated>
    </task>
    <task id="LOCAL-00036" summary="LeetCode 1351&#10;&#10;Runtime: 95.80%&#10;Memory Usage: 23.32%&#10;&#10;利用矩阵的有序性，当遇到某行第一个为负数的，则后面都为负数，减少判断次数。">
      <created>1594889510814</created>
      <option name="number" value="00036" />
      <option name="presentableId" value="LOCAL-00036" />
      <option name="project" value="LOCAL" />
      <updated>1594889510814</updated>
    </task>
    <task id="LOCAL-00037" summary="LeetCode 1464&#10;&#10;Runtime: 91.27%&#10;Memory Usage: 75.36%&#10;&#10;事实上就是找到数组里最大的两个数，将他们分别减1后相乘">
      <created>1595062704742</created>
      <option name="number" value="00037" />
      <option name="presentableId" value="LOCAL-00037" />
      <option name="project" value="LOCAL" />
      <updated>1595062704742</updated>
    </task>
    <task id="LOCAL-00038" summary="LeetCode 1021&#10;&#10;Runtime: 12.70%&#10;Memory Usage: 89.13%&#10;&#10;变量count保存左括号数-右括号数。即遇到左括号则自增1，遇到右括号则自减1。&#10;当count为0的时候，说明在这一段中左括号和右括号相等，是个完美匹配的括号串。&#10;变量prev保存的是上一次括号完全匹配之后，下一个括号匹配开始位置。&#10;当count==0的时候，结果增加的是[prev + 1, i)">
      <created>1595171430905</created>
      <option name="number" value="00038" />
      <option name="presentableId" value="LOCAL-00038" />
      <option name="project" value="LOCAL" />
      <updated>1595171430905</updated>
    </task>
    <task id="LOCAL-00039" summary="LeetCode 1021&#10;&#10;Runtime: 37.16%&#10;Memory Usage: 73.85%&#10;&#10;变量count保存左括号数-右括号数。即遇到左括号则自增1，遇到右括号则自减1。&#10;当count为0的时候，说明在这一段中左括号和右括号相等，是个完美匹配的括号串。&#10;变量prev保存的是上一次括号完全匹配之后，下一个括号匹配开始位置。&#10;当count==0的时候，结果增加的是[prev + 1, i)">
      <created>1595260165646</created>
      <option name="number" value="00039" />
      <option name="presentableId" value="LOCAL-00039" />
      <option name="project" value="LOCAL" />
      <updated>1595260165646</updated>
    </task>
    <task id="LOCAL-00040" summary="LeetCode 0771&#10;&#10;Runtime: 34.45% &#10;Memory Usage: 54.65%&#10;&#10;直接遍历S中每个字符，判断是否在J中存在即可。">
      <created>1595263982588</created>
      <option name="number" value="00040" />
      <option name="presentableId" value="LOCAL-00040" />
      <option name="project" value="LOCAL" />
      <updated>1595263982588</updated>
    </task>
    <task id="LOCAL-00041" summary="LeetCode 0832&#10;&#10;Runtime: 86.17% &#10;Memory Usage: 5.03%&#10;&#10;遍历二维vector，每行反向遍历，同时做01翻转。">
      <created>1595386040781</created>
      <option name="number" value="00041" />
      <option name="presentableId" value="LOCAL-00041" />
      <option name="project" value="LOCAL" />
      <updated>1595386040782</updated>
    </task>
    <task id="LOCAL-00042" summary="LeetCode 0771&#10;&#10;Runtime:  25.89% &#10;Memory Usage: 59.14% &#10;&#10;检查S中每个字符在J中是否存在即可。">
      <created>1595386215540</created>
      <option name="number" value="00042" />
      <option name="presentableId" value="LOCAL-00042" />
      <option name="project" value="LOCAL" />
      <updated>1595386215540</updated>
    </task>
    <task id="LOCAL-00043" summary="LeetCode 0067&#10;&#10;Runtime:  31.70% &#10;Memory Usage: 8.27% &#10;&#10;1）先把位数少的前面补全0&#10;2）模拟人计算加法，从低位起逐个位相加&#10;当前位=数位1+数位2+进位&#10;如果当前位=0或者1，则：当前位=0或1，进位=0&#10;如果当前位=2或3，则：当前位=0或1，进位=1&#10;3）最高位的处理&#10;如果当前位置是最高位，且进位=1，前面还要补一位">
      <created>1595517945298</created>
      <option name="number" value="00043" />
      <option name="presentableId" value="LOCAL-00043" />
      <option name="project" value="LOCAL" />
      <updated>1595517945299</updated>
    </task>
    <task id="LOCAL-00044" summary="LeetCode 0067&#10;&#10;Runtime:   8.78% &#10;Memory Usage: 5.42%&#10;&#10;设置字典，记录每个数字的出现次数。当有一个数的出现次数达到N次，循环中止并返回值。&#10;&#10;注意：&#10;1）对于map，用insert方式插入时，出现过的key不会被覆盖，而是报错；使用[]的方式则可以覆盖。">
      <created>1595604440772</created>
      <option name="number" value="00044" />
      <option name="presentableId" value="LOCAL-00044" />
      <option name="project" value="LOCAL" />
      <updated>1595604440772</updated>
    </task>
    <task id="LOCAL-00045" summary="LeetCode 0961&#10;&#10;Runtime:   8.78% &#10;Memory Usage: 5.42%&#10;&#10;设置字典，记录每个数字的出现次数。当有一个数的出现次数达到N次，循环中止并返回值。&#10;&#10;注意：&#10;1）对于map，用insert方式插入时，出现过的key不会被覆盖，而是报错；使用[]的方式则可以覆盖。">
      <created>1595606285661</created>
      <option name="number" value="00045" />
      <option name="presentableId" value="LOCAL-00045" />
      <option name="project" value="LOCAL" />
      <updated>1595606285661</updated>
    </task>
    <task id="LOCAL-00046" summary="LeetCode 1207&#10;&#10;Runtime: 39.62% &#10;Memory Usage: 96.60%&#10;&#10;1）用字典记录数组每个数出现的次数；&#10;2）再用字典记录出现的次数出现的次数；&#10;3）如果有出现的次数出现的次数大于1，就返回false。">
      <created>1595606708403</created>
      <option name="number" value="00046" />
      <option name="presentableId" value="LOCAL-00046" />
      <option name="project" value="LOCAL" />
      <updated>1595606708403</updated>
    </task>
    <task id="LOCAL-00047" summary="LeetCode 0876&#10;&#10;Runtime: 100.00% &#10;Memory Usage: 40.19%&#10;&#10;从头遍历一遍链表，一边将其内容放在一个数组中。然后利用数组随机访问的特点，立刻找到链表的中间位置。">
      <created>1595683139387</created>
      <option name="number" value="00047" />
      <option name="presentableId" value="LOCAL-00047" />
      <option name="project" value="LOCAL" />
      <updated>1595683139387</updated>
    </task>
    <task id="LOCAL-00048" summary="LeetCode 0237&#10;&#10;Runtime:  84.02% &#10;Memory Usage: 73.66%&#10;&#10;本题目的难点在于如何获取给定结点前面的结点。结论是，直接交换当前结点和下一个结点的value，然后删除下一个结点。">
      <created>1595776673254</created>
      <option name="number" value="00048" />
      <option name="presentableId" value="LOCAL-00048" />
      <option name="project" value="LOCAL" />
      <updated>1595776673254</updated>
    </task>
    <task id="LOCAL-00049" summary="LeetCode 0206. Reverse Linked List&#10;&#10;Runtime:  100.00% &#10;Memory Usage: 76.83% &#10;&#10;逆置链表，采用头插法。&#10;注意输入数据可能是nullptr。">
      <created>1595783429049</created>
      <option name="number" value="00049" />
      <option name="presentableId" value="LOCAL-00049" />
      <option name="project" value="LOCAL" />
      <updated>1595783429049</updated>
    </task>
    <task id="LOCAL-00050" summary="LeetCode 0101. Symmetric Tree&#10;&#10;Runtime:  33.33% &#10;Memory Usage: 53.59%&#10;&#10;初步思路：设计一个递归函数，里面有两个子递归过程：&#10;1）遍历左子树的左和右子树的右,只要有一层不相等，就返回false；&#10;2）遍历左子树的右和右子树的左，只要有一层不相等，就返回false。">
      <created>1595834034225</created>
      <option name="number" value="00050" />
      <option name="presentableId" value="LOCAL-00050" />
      <option name="project" value="LOCAL" />
      <updated>1595834034226</updated>
    </task>
    <task id="LOCAL-00051" summary="LeetCode 0107. Binary Tree Level Order Traversal II&#10;&#10;Runtime: 66.90% &#10;Memory Usage: 34.58%&#10;&#10;思路：可以先自顶向下、从右到左地层序遍历该树，然后将数组里的元素逆序排列（但要保持二维数组的结构）。">
      <created>1595946579448</created>
      <option name="number" value="00051" />
      <option name="presentableId" value="LOCAL-00051" />
      <option name="project" value="LOCAL" />
      <updated>1595946579448</updated>
    </task>
    <task id="LOCAL-00052" summary="LeetCode 0107. Binary Tree Level Order Traversal II&#10;&#10;补充代码注释。">
      <created>1595946944076</created>
      <option name="number" value="00052" />
      <option name="presentableId" value="LOCAL-00052" />
      <option name="project" value="LOCAL" />
      <updated>1595946944076</updated>
    </task>
    <task id="LOCAL-00053" summary="LeetCode 0107. Binary Tree Level Order Traversal II&#10;&#10;更正clear函数的相关注释。">
      <created>1595961494444</created>
      <option name="number" value="00053" />
      <option name="presentableId" value="LOCAL-00053" />
      <option name="project" value="LOCAL" />
      <updated>1595961494444</updated>
    </task>
    <task id="LOCAL-00054" summary="LeetCode 0107. Binary Tree Level Order Traversal II&#10;&#10;更正哨兵结点的相关注释。">
      <created>1595961598815</created>
      <option name="number" value="00054" />
      <option name="presentableId" value="LOCAL-00054" />
      <option name="project" value="LOCAL" />
      <updated>1595961598815</updated>
    </task>
    <task id="LOCAL-00055" summary="LeetCode 0100. Same Tree Level Order Traversal II&#10;&#10;Runtime:  100.00%&#10;Memory Usage: 55.06%&#10;&#10;递归判断。同时判断两者左子树和右子树是否相等，必须左右子树同时相等才返回true。">
      <created>1596075383077</created>
      <option name="number" value="00055" />
      <option name="presentableId" value="LOCAL-00055" />
      <option name="project" value="LOCAL" />
      <updated>1596075383078</updated>
    </task>
    <task id="LOCAL-00056" summary="LeetCode 0020. Valid Parentheses&#10;&#10;Runtime:  46.99%&#10;Memory Usage: 67.76%&#10;&#10;思路1（错误）：使用map记录所有左括号'(',  '{',  '[' 的个数。每次读取字符串的一个字符。&#10;每次读取右括号时，先看看对应的左括号计数是否为0。如果为0，则直接返回不合法。如果不为0，则对应左括号的计数-1。&#10;最后结束时，必须保证所有左括号的计数为0，否则也不合法。&#10;&#10;这个思路存在一个问题：&#10;形如&quot;([)]&quot;的字符串，是不合法的，括号对之间交叉了。&#10;&#10;思路2：采用栈记录所有左括号，遇到左括号就入栈。如果遇到右括号就看当前它和栈顶左括号是否对应。如果不对应则返回false。">
      <created>1596204915475</created>
      <option name="number" value="00056" />
      <option name="presentableId" value="LOCAL-00056" />
      <option name="project" value="LOCAL" />
      <updated>1596204915475</updated>
    </task>
    <task id="LOCAL-00057" summary="LeetCode 0155. Min Stack&#10;&#10;Runtime:  76.69%&#10;Memory Usage: 13.63%&#10;&#10;思路1（错误）：使用map记录所有左括号'(',  '{',  '[' 的个数。每次读取字符串的一个字符。&#10;每次读取右括号时，先看看对应的左括号计数是否为0。如果为0，则直接返回不合法。如果不为0，则对应左括号的计数-1。&#10;最后结束时，必须保证所有左括号的计数为0，否则也不合法。&#10;&#10;这个思路存在一个问题：&#10;形如&quot;([)]&quot;的字符串，是不合法的，括号对之间交叉了。&#10;&#10;思路2：采用栈记录所有左括号，遇到左括号就入栈。如果遇到右括号就看当前它和栈顶左括号是否对应。如果不对应则返回false。">
      <created>1596289421603</created>
      <option name="number" value="00057" />
      <option name="presentableId" value="LOCAL-00057" />
      <option name="project" value="LOCAL" />
      <updated>1596289421603</updated>
    </task>
    <task id="LOCAL-00058" summary="LeetCode 0155. Min Stack&#10;&#10;Runtime:  76.69%&#10;Memory Usage: 13.63%&#10;&#10;更新了解题思路注释。">
      <created>1596289803834</created>
      <option name="number" value="00058" />
      <option name="presentableId" value="LOCAL-00058" />
      <option name="project" value="LOCAL" />
      <updated>1596289803834</updated>
    </task>
    <task id="LOCAL-00059" summary="LeetCode 0232. Implement Queue using Stacks&#10;&#10;Runtime:  36.03%&#10;Memory Usage: 51.71%&#10;&#10;用两个栈a, b模拟队列。">
      <created>1596383482846</created>
      <option name="number" value="00059" />
      <option name="presentableId" value="LOCAL-00059" />
      <option name="project" value="LOCAL" />
      <updated>1596383482846</updated>
    </task>
    <task id="LOCAL-00060" summary="LeetCode 0415. Add Strings&#10;&#10;Runtime:  8.88%&#10;Memory Usage: 11.17%&#10;&#10;思路：&#10;1）先把位数少的前面补全0&#10;2）模拟人算加法，从低位起逐位相加&#10;当前位=数位1+数位2+进位，&#10;如果当前位=0-9，则进位=0；&#10;如果当前为=10-18，则当前位=当前位-10，进位=1&#10;3）最高位的处理&#10;如果当前位是最高位，且计算结果进位=1，则前面还要补一位">
      <created>1596451132003</created>
      <option name="number" value="00060" />
      <option name="presentableId" value="LOCAL-00060" />
      <option name="project" value="LOCAL" />
      <updated>1596451132004</updated>
    </task>
    <task id="LOCAL-00061" summary="LeetCode 0122. Best Time to Buy and Sell Stock II&#10;&#10;Runtime:  94.27%&#10;Memory Usage: 52.64%&#10;&#10;思路：&#10;一天内可以先卖出，再买进，所以问题可以简化为，只要后一天股价比前一天高，就可以先买后卖。&#10;因此，两个两个地遍历数组，如果明天比今天价格高，那么今天就买入；否则就继续看明天和后天的价格。">
      <created>1596553184941</created>
      <option name="number" value="00061" />
      <option name="presentableId" value="LOCAL-00061" />
      <option name="project" value="LOCAL" />
      <updated>1596553184942</updated>
    </task>
    <task id="LOCAL-00062" summary="LeetCode 0121. Best Time to Buy and Sell Stock&#10;&#10;Runtime:  40.95%%&#10;Memory Usage: 31.85%&#10;&#10;思路：&#10;一天内可以先卖出，再买进，所以问题可以简化为，只要后一天股价比前一天高，就可以先买后卖。&#10;因此，两个两个地遍历数组，如果明天比今天价格高，那么今天就买入；否则就继续看明天和后天的价格。">
      <created>1596619738284</created>
      <option name="number" value="00062" />
      <option name="presentableId" value="LOCAL-00062" />
      <option name="project" value="LOCAL" />
      <updated>1596619738284</updated>
    </task>
    <task id="LOCAL-00063" summary="LeetCode 0013. Roman to Integer&#10;&#10;Runtime:  52.10%&#10;Memory Usage: 45.95%&#10;&#10;思路：&#10;不需要分多种情况讨论，可以总结为：从左到右读取字符串，如果当前位置字符对应的值小于等于前一个位置字符对应的值，最终值就加上上一个位置字符对应值，否则就减去上一个位置字符对应值。">
      <created>1596646308850</created>
      <option name="number" value="00063" />
      <option name="presentableId" value="LOCAL-00063" />
      <option name="project" value="LOCAL" />
      <updated>1596646308850</updated>
    </task>
    <task id="LOCAL-00064" summary="LeetCode 0461. Hamming Distance&#10;&#10;Runtime:  100.00%&#10;Memory Usage: 7.12%&#10;&#10;思路：&#10;将两个数转为二进制，位少的补齐。然后对比对应位置字符。">
      <created>1596733565987</created>
      <option name="number" value="00064" />
      <option name="presentableId" value="LOCAL-00064" />
      <option name="project" value="LOCAL" />
      <updated>1596733565987</updated>
    </task>
    <task id="LOCAL-00065" summary="LeetCode 0461. Hamming Distance&#10;&#10;Runtime:  100.00%&#10;Memory Usage: 7.12%&#10;&#10;更新思路2：&#10;1）使用bitset进行XOR位运算。通过bitset&lt;32&gt;，可以将参与运算的数统一位32位二进制数。&#10;2）使用bitset对象的count方法，求出位为1的个数。">
      <created>1596820504514</created>
      <option name="number" value="00065" />
      <option name="presentableId" value="LOCAL-00065" />
      <option name="project" value="LOCAL" />
      <updated>1596820504514</updated>
    </task>
    <task id="LOCAL-00066" summary="LeetCode 0617. Merge Two Binary Trees&#10;&#10;Runtime:  66.29%&#10;Memory Usage: 82.00%&#10;&#10;思路：&#10;递归遍历，同时访问左孩子或同时访问右边孩子。&#10;当前如果有一个结点为空，则立刻将另一个结点作为返回值。">
      <created>1596905282841</created>
      <option name="number" value="00066" />
      <option name="presentableId" value="LOCAL-00066" />
      <option name="project" value="LOCAL" />
      <updated>1596905282841</updated>
    </task>
    <task id="LOCAL-00067" summary="LeetCode 0617. Merge Two Binary Trees&#10;&#10;Runtime:  100.00%&#10;Memory Usage: 63.15%&#10;&#10;思路：&#10;递归，遍历二叉树，一边遍历一边逐个翻转左右孩子即可。不要想太复杂。">
      <created>1596993080952</created>
      <option name="number" value="00067" />
      <option name="presentableId" value="LOCAL-00067" />
      <option name="project" value="LOCAL" />
      <updated>1596993080952</updated>
    </task>
    <task id="LOCAL-00068" summary="LeetCode 0448. Find All Numbers Disappeared in an Array&#10;&#10;Runtime:  43.94%&#10;Memory Usage: 90.31%&#10;&#10;思路：遍历数组a的元素，根据元素的取值，将其作为索引找到的数组的值+n。比如遍历到a[i]=3，则将a[3]的值加n。&#10;这样要注意的是，再往后会遇到加n以后的数组值，所以每次取数组值的时候，需要a[i] % a.size()。这样，最后哪个位置的值小于等于n，哪个位置就是没出现的数。">
      <created>1597459994205</created>
      <option name="number" value="00068" />
      <option name="presentableId" value="LOCAL-00068" />
      <option name="project" value="LOCAL" />
      <updated>1597459994206</updated>
    </task>
    <task id="LOCAL-00069" summary="LeetCode 0172. Factorial Trailing Zeroes&#10;&#10;Runtime:  38.27%&#10;Memory Usage: 50.39%&#10;&#10;思路:&#10;1）因数里有多少个0，取决于其因数里有多少个10；&#10;2）而对10=2*5，因此可以进一步考察质因数里有多少个2和5，而10的个数取决于2和5当中较少的那个；&#10;3）再进一步思考，我们考察的是n的阶乘，因此因数由n, n-1, n-2, ..., 2, 1构成。这些数当中，每隔一个就会出现一个偶数，也就会出现一个因数2；而5的倍数则每5个数才出现一次。&#10;4）因此可以得到结论：n！的质因数里，5的个数一定不多于2的个数。问题转化为，求质因数分解后有多少个5；&#10;5）只需要考察从n到1中，末位为5和0的数，他们的质因数所含有的5的个数之和。&#10;6）进一步分析，每个5个数，会出现一个5的倍数；但每个25，又会出现25的倍数，也就是每25个数要额外加一个因数5；以此类推，每125也要额外加一个因数5……&#10;7）因此，问题转化为，求n/5 + n/25 + n/125 + ...">
      <created>1597603320126</created>
      <option name="number" value="00069" />
      <option name="presentableId" value="LOCAL-00069" />
      <option name="project" value="LOCAL" />
      <updated>1597603320126</updated>
    </task>
    <task id="LOCAL-00070" summary="LeetCode 0160. Intersection of Two Linked Lists&#10;&#10;Runtime:  91.82%&#10;Memory Usage: 15.37%&#10;&#10;思路:&#10;让两个指针分别从A，B头开始向后遍历，如果到了末尾，就从另一个链表头开始继续遍历，直到两个指针相遇为止。&#10;这是因为，假设链表A自有部分长a，链表B自有部分长b，公共部分长c，那么这种情况下，两个指针都会走a+b+c的长度。&#10;因此，如果他们存在公共部分，一定是在公共点起始处相遇。">
      <created>1597627759334</created>
      <option name="number" value="00070" />
      <option name="presentableId" value="LOCAL-00070" />
      <option name="project" value="LOCAL" />
      <updated>1597627759334</updated>
    </task>
    <task id="LOCAL-00071" summary="LeetCode 0053. Maximum Subarray&#10;&#10;Runtime:  59.76%&#10;Memory Usage: 29.34%&#10;&#10;思路:&#10;动态规划&#10;初始状态：a[0] = nums[0]&#10;第 i 个子组合的最大值为：第i-1个子组合的最大值加第 i 个数字，或第i个数字本身">
      <created>1597767512489</created>
      <option name="number" value="00071" />
      <option name="presentableId" value="LOCAL-00071" />
      <option name="project" value="LOCAL" />
      <updated>1597767512490</updated>
    </task>
    <task id="LOCAL-00072" summary="LeetCode 0070. Climbing Stairs&#10;&#10;Runtime:  100.00%&#10;Memory Usage: 79.50%&#10;&#10;思路:&#10;动态规划&#10;f(n) 表示爬到第n级台阶，则f(n) = f(n-1) + f(n-2)，（因为只能走一步或者两步）&#10;初始条件：f(0)=1, f(1)=1&#10;由于只关心当前f(n)和前两个f(n-1), f(n-2)，所以可以只用三个变量存储之，而不用dp[n]数组。">
      <created>1597853751483</created>
      <option name="number" value="00072" />
      <option name="presentableId" value="LOCAL-00072" />
      <option name="project" value="LOCAL" />
      <updated>1597853751483</updated>
    </task>
    <task id="LOCAL-00073" summary="LeetCode 0070. Climbing Stairs&#10;&#10;Runtime:  75.56%&#10;Memory Usage: 18.61%&#10;&#10;思路：以下是几个正确解答问题的关键：&#10;1）路径长度为经过的结点数-1（植树问题！3棵树中间有2段路）&#10;2）一个结点的孩子向下遍历经过的最多结点数就是这个孩子的深度。&#10;3）一个树的最大路径结点数 = 左孩子最大路径结点数 + 右孩子最大路径结点数 + 1（它本身）&#10;4）可以用递归，算出这棵树所有结点的最大路径结点数，只保留最大者。然后-1，即得到结果。&#10;这题有很多小细节要注意。">
      <created>1597892471360</created>
      <option name="number" value="00073" />
      <option name="presentableId" value="LOCAL-00073" />
      <option name="project" value="LOCAL" />
      <updated>1597892471360</updated>
    </task>
    <task id="LOCAL-00074" summary="LeetCode 0581. Shortest Unsorted Continuous Subarray&#10;&#10;思路：&#10;1）从左往右遍历，记录遍历过的部分的最大值。如果当前遍历到的元素比最大值要小，则该元素需要重排。记录该位置为high&#10;2）从右往左遍历，记录遍历过的部分的最小值。如果当前遍历到的元素比最小值大，则该元素需要重排。记录该位置为low&#10;3）如果high==low（记得之前需要初始化为相同值），则数组整体有序。否则返回high-low+1">
      <created>1598537306276</created>
      <option name="number" value="00074" />
      <option name="presentableId" value="LOCAL-00074" />
      <option name="project" value="LOCAL" />
      <updated>1598537306277</updated>
    </task>
    <task id="LOCAL-00075" summary="LeetCode 0078. Subsets&#10;&#10;思路：遍历该整数数组。将最终返回的结果集合记做result。&#10;每次遍历到一个新数，result中就要新增加：由result中所有子集加上当前这个数构成的一系列新集合。&#10;例如，输入[1,2,3]，遍历到了3，此时result里为[[], 1, 2, 12]。那么result里就要新增以下子集：1, 12, 23, 123。">
      <created>1598624058906</created>
      <option name="number" value="00075" />
      <option name="presentableId" value="LOCAL-00075" />
      <option name="project" value="LOCAL" />
      <updated>1598624058906</updated>
    </task>
    <task id="LOCAL-00076" summary="LeetCode 1295. Find Numbers with Even Number of Digits&#10;&#10;思路：转为字符串并检查长度。">
      <created>1598715917633</created>
      <option name="number" value="00076" />
      <option name="presentableId" value="LOCAL-00076" />
      <option name="project" value="LOCAL" />
      <updated>1598715917634</updated>
    </task>
    <task id="LOCAL-00077" summary="LeetCode 0046. Permutations&#10;&#10;思路：回溯法。&#10;将数组分为两个部分：已经排列的部分（设[0, first-1]）和还没排列的部分（设为[first, n-1]）。&#10;设当前要排列的数为first位，待填写的数下标为i，那么就将first和i位的数相交换，这样就当作[0, first]完成了交换，剩下没交换的位置位[first+1, n-1]。&#10;然后在此基础上进行递归。&#10;递归后将first和i位的数位置还原，再准备将first位与i+1位的数进行交换。">
      <created>1598794179866</created>
      <option name="number" value="00077" />
      <option name="presentableId" value="LOCAL-00077" />
      <option name="project" value="LOCAL" />
      <updated>1598794179866</updated>
    </task>
    <option name="localTasksCounter" value="78" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="2" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
    <option name="oldMeFiltersMigrated" value="true" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="LeetCode 0107. Binary Tree Level Order Traversal II&#10;&#10;更正clear函数的相关注释。" />
    <MESSAGE value="LeetCode 0107. Binary Tree Level Order Traversal II&#10;&#10;更正哨兵结点的相关注释。" />
    <MESSAGE value="LeetCode 0100. Same Tree Level Order Traversal II&#10;&#10;Runtime:  100.00%&#10;Memory Usage: 55.06%&#10;&#10;递归判断。同时判断两者左子树和右子树是否相等，必须左右子树同时相等才返回true。" />
    <MESSAGE value="LeetCode 0020. Valid Parentheses&#10;&#10;Runtime:  46.99%&#10;Memory Usage: 67.76%&#10;&#10;思路1（错误）：使用map记录所有左括号'(',  '{',  '[' 的个数。每次读取字符串的一个字符。&#10;每次读取右括号时，先看看对应的左括号计数是否为0。如果为0，则直接返回不合法。如果不为0，则对应左括号的计数-1。&#10;最后结束时，必须保证所有左括号的计数为0，否则也不合法。&#10;&#10;这个思路存在一个问题：&#10;形如&quot;([)]&quot;的字符串，是不合法的，括号对之间交叉了。&#10;&#10;思路2：采用栈记录所有左括号，遇到左括号就入栈。如果遇到右括号就看当前它和栈顶左括号是否对应。如果不对应则返回false。" />
    <MESSAGE value="LeetCode 0155. Min Stack&#10;&#10;Runtime:  76.69%&#10;Memory Usage: 13.63%&#10;&#10;思路1（错误）：使用map记录所有左括号'(',  '{',  '[' 的个数。每次读取字符串的一个字符。&#10;每次读取右括号时，先看看对应的左括号计数是否为0。如果为0，则直接返回不合法。如果不为0，则对应左括号的计数-1。&#10;最后结束时，必须保证所有左括号的计数为0，否则也不合法。&#10;&#10;这个思路存在一个问题：&#10;形如&quot;([)]&quot;的字符串，是不合法的，括号对之间交叉了。&#10;&#10;思路2：采用栈记录所有左括号，遇到左括号就入栈。如果遇到右括号就看当前它和栈顶左括号是否对应。如果不对应则返回false。" />
    <MESSAGE value="LeetCode 0155. Min Stack&#10;&#10;Runtime:  76.69%&#10;Memory Usage: 13.63%&#10;&#10;更新了解题思路注释。" />
    <MESSAGE value="LeetCode 0232. Implement Queue using Stacks&#10;&#10;Runtime:  36.03%&#10;Memory Usage: 51.71%&#10;&#10;用两个栈a, b模拟队列。" />
    <MESSAGE value="LeetCode 0415. Add Strings&#10;&#10;Runtime:  8.88%&#10;Memory Usage: 11.17%&#10;&#10;思路：&#10;1）先把位数少的前面补全0&#10;2）模拟人算加法，从低位起逐位相加&#10;当前位=数位1+数位2+进位，&#10;如果当前位=0-9，则进位=0；&#10;如果当前为=10-18，则当前位=当前位-10，进位=1&#10;3）最高位的处理&#10;如果当前位是最高位，且计算结果进位=1，则前面还要补一位" />
    <MESSAGE value="LeetCode 0122. Best Time to Buy and Sell Stock II&#10;&#10;Runtime:  94.27%&#10;Memory Usage: 52.64%&#10;&#10;思路：&#10;一天内可以先卖出，再买进，所以问题可以简化为，只要后一天股价比前一天高，就可以先买后卖。&#10;因此，两个两个地遍历数组，如果明天比今天价格高，那么今天就买入；否则就继续看明天和后天的价格。" />
    <MESSAGE value="LeetCode 0121. Best Time to Buy and Sell Stock&#10;&#10;Runtime:  40.95%%&#10;Memory Usage: 31.85%&#10;&#10;思路：动态规划。&#10;1）记录第i天之前买入的最小值;&#10;2）计算：如果在第i天之前的最小值买入，并在第i天卖出的利润，得到第i天的最大利润;&#10;3）对比每一天的最大利润，得到结果。" />
    <MESSAGE value="LeetCode 0013. Roman to Integer&#10;&#10;Runtime:  52.10%&#10;Memory Usage: 45.95%&#10;&#10;思路：&#10;不需要分多种情况讨论，可以总结为：从左到右读取字符串，如果当前位置字符对应的值小于等于前一个位置字符对应的值，最终值就加上上一个位置字符对应值，否则就减去上一个位置字符对应值。" />
    <MESSAGE value="LeetCode 0461. Hamming Distance&#10;&#10;Runtime:  100.00%&#10;Memory Usage: 7.12%&#10;&#10;思路：&#10;将两个数转为二进制，位少的补齐。然后对比对应位置字符。" />
    <MESSAGE value="LeetCode 0461. Hamming Distance&#10;&#10;Runtime:  100.00%&#10;Memory Usage: 7.12%&#10;&#10;更新思路2：&#10;1）使用bitset进行XOR位运算。通过bitset&lt;32&gt;，可以将参与运算的数统一位32位二进制数。&#10;2）使用bitset对象的count方法，求出位为1的个数。" />
    <MESSAGE value="LeetCode 0617. Merge Two Binary Trees&#10;&#10;Runtime:  66.29%&#10;Memory Usage: 82.00%&#10;&#10;思路：&#10;递归遍历，同时访问左孩子或同时访问右边孩子。&#10;当前如果有一个结点为空，则立刻将另一个结点作为返回值。" />
    <MESSAGE value="LeetCode 0617. Merge Two Binary Trees&#10;&#10;Runtime:  100.00%&#10;Memory Usage: 63.15%&#10;&#10;思路：&#10;递归，遍历二叉树，一边遍历一边逐个翻转左右孩子即可。不要想太复杂。" />
    <MESSAGE value="LeetCode 0448. Find All Numbers Disappeared in an Array&#10;&#10;Runtime:  43.94%&#10;Memory Usage: 90.31%&#10;&#10;思路：遍历数组a的元素，根据元素的取值，将其作为索引找到的数组的值+n。比如遍历到a[i]=3，则将a[3]的值加n。&#10;这样要注意的是，再往后会遇到加n以后的数组值，所以每次取数组值的时候，需要a[i] % a.size()。这样，最后哪个位置的值小于等于n，哪个位置就是没出现的数。" />
    <MESSAGE value="LeetCode 0172. Factorial Trailing Zeroes&#10;&#10;Runtime:  38.27%&#10;Memory Usage: 50.39%&#10;&#10;思路:&#10;1）因数里有多少个0，取决于其因数里有多少个10；&#10;2）而对10=2*5，因此可以进一步考察质因数里有多少个2和5，而10的个数取决于2和5当中较少的那个；&#10;3）再进一步思考，我们考察的是n的阶乘，因此因数由n, n-1, n-2, ..., 2, 1构成。这些数当中，每隔一个就会出现一个偶数，也就会出现一个因数2；而5的倍数则每5个数才出现一次。&#10;4）因此可以得到结论：n！的质因数里，5的个数一定不多于2的个数。问题转化为，求质因数分解后有多少个5；&#10;5）只需要考察从n到1中，末位为5和0的数，他们的质因数所含有的5的个数之和。&#10;6）进一步分析，每个5个数，会出现一个5的倍数；但每个25，又会出现25的倍数，也就是每25个数要额外加一个因数5；以此类推，每125也要额外加一个因数5……&#10;7）因此，问题转化为，求n/5 + n/25 + n/125 + ..." />
    <MESSAGE value="LeetCode 0160. Intersection of Two Linked Lists&#10;&#10;Runtime:  91.82%&#10;Memory Usage: 15.37%&#10;&#10;思路:&#10;让两个指针分别从A，B头开始向后遍历，如果到了末尾，就从另一个链表头开始继续遍历，直到两个指针相遇为止。&#10;这是因为，假设链表A自有部分长a，链表B自有部分长b，公共部分长c，那么这种情况下，两个指针都会走a+b+c的长度。&#10;因此，如果他们存在公共部分，一定是在公共点起始处相遇。" />
    <MESSAGE value="LeetCode 0053. Maximum Subarray&#10;&#10;Runtime:  59.76%&#10;Memory Usage: 29.34%&#10;&#10;思路:&#10;动态规划&#10;初始状态：a[0] = nums[0]&#10;第 i 个子组合的最大值为：第i-1个子组合的最大值加第 i 个数字，或第i个数字本身" />
    <MESSAGE value="LeetCode 0070. Climbing Stairs&#10;&#10;Runtime:  100.00%&#10;Memory Usage: 79.50%&#10;&#10;思路:&#10;动态规划&#10;f(n) 表示爬到第n级台阶，则f(n) = f(n-1) + f(n-2)，（因为只能走一步或者两步）&#10;初始条件：f(0)=1, f(1)=1&#10;由于只关心当前f(n)和前两个f(n-1), f(n-2)，所以可以只用三个变量存储之，而不用dp[n]数组。" />
    <MESSAGE value="LeetCode 0070. Climbing Stairs&#10;&#10;Runtime:  75.56%&#10;Memory Usage: 18.61%&#10;&#10;思路：以下是几个正确解答问题的关键：&#10;1）路径长度为经过的结点数-1（植树问题！3棵树中间有2段路）&#10;2）一个结点的孩子向下遍历经过的最多结点数就是这个孩子的深度。&#10;3）一个树的最大路径结点数 = 左孩子最大路径结点数 + 右孩子最大路径结点数 + 1（它本身）&#10;4）可以用递归，算出这棵树所有结点的最大路径结点数，只保留最大者。然后-1，即得到结果。&#10;这题有很多小细节要注意。" />
    <MESSAGE value="LeetCode 0581. Shortest Unsorted Continuous Subarray&#10;&#10;思路：&#10;1）从左往右遍历，记录遍历过的部分的最大值。如果当前遍历到的元素比最大值要小，则该元素需要重排。记录该位置为high&#10;2）从右往左遍历，记录遍历过的部分的最小值。如果当前遍历到的元素比最小值大，则该元素需要重排。记录该位置为low&#10;3）如果high==low（记得之前需要初始化为相同值），则数组整体有序。否则返回high-low+1" />
    <MESSAGE value="LeetCode 0078. Subsets&#10;&#10;思路：遍历该整数数组。将最终返回的结果集合记做result。&#10;每次遍历到一个新数，result中就要新增加：由result中所有子集加上当前这个数构成的一系列新集合。&#10;例如，输入[1,2,3]，遍历到了3，此时result里为[[], 1, 2, 12]。那么result里就要新增以下子集：1, 12, 23, 123。" />
    <MESSAGE value="LeetCode 1295. Find Numbers with Even Number of Digits&#10;&#10;思路：转为字符串并检查长度。" />
    <MESSAGE value="LeetCode 0046. Permutations&#10;&#10;思路：回溯法。&#10;将数组分为两个部分：已经排列的部分（设[0, first-1]）和还没排列的部分（设为[first, n-1]）。&#10;设当前要排列的数为first位，待填写的数下标为i，那么就将first和i位的数相交换，这样就当作[0, first]完成了交换，剩下没交换的位置位[first+1, n-1]。&#10;然后在此基础上进行递归。&#10;递归后将first和i位的数位置还原，再准备将first位与i+1位的数进行交换。" />
    <option name="LAST_COMMIT_MESSAGE" value="LeetCode 0046. Permutations&#10;&#10;思路：回溯法。&#10;将数组分为两个部分：已经排列的部分（设[0, first-1]）和还没排列的部分（设为[first, n-1]）。&#10;设当前要排列的数为first位，待填写的数下标为i，那么就将first和i位的数相交换，这样就当作[0, first]完成了交换，剩下没交换的位置位[first+1, n-1]。&#10;然后在此基础上进行递归。&#10;递归后将first和i位的数位置还原，再准备将first位与i+1位的数进行交换。" />
  </component>
  <component name="WindowStateProjectService">
    <state x="-1553" y="74" key="#Deployment" timestamp="1593359910954">
      <screen x="-1920" y="0" width="1549" height="831" />
    </state>
    <state x="-1553" y="74" key="#Deployment/0.0.1549.831/-1920.0.1549.831@-1920.0.1549.831" timestamp="1593359910954" />
    <state x="-1569" y="61" key="#SSH_Configurations" timestamp="1593359783033">
      <screen x="-1920" y="0" width="1549" height="831" />
    </state>
    <state x="-1569" y="61" key="#SSH_Configurations/0.0.1549.831/-1920.0.1549.831@-1920.0.1549.831" timestamp="1593359783033" />
    <state x="-1527" y="181" key="#com.intellij.fileTypes.FileTypeChooser" timestamp="1595783266836">
      <screen x="-1920" y="0" width="1418" height="759" />
    </state>
    <state x="-1527" y="181" key="#com.intellij.fileTypes.FileTypeChooser/0.0.1418.759/-1920.0.1418.759@-1920.0.1418.759" timestamp="1595783266836" />
    <state x="510" y="155" key="FileChooserDialogImpl" timestamp="1597684725799">
      <screen x="0" y="0" width="1418" height="759" />
    </state>
    <state x="510" y="155" key="FileChooserDialogImpl/0.0.1418.759@0.0.1418.759" timestamp="1597684725799" />
    <state x="552" y="169" key="FileChooserDialogImpl/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824" timestamp="1593351722773" />
    <state x="-1363" y="170" key="FileChooserDialogImpl/0.0.1549.831/-1920.0.1549.831@-1920.0.1549.831" timestamp="1593359964702" />
    <state x="557" y="170" key="FileChooserDialogImpl/0.0.1549.831/-1920.0.1549.831@0.0.1549.831" timestamp="1592840458843" />
    <state x="-1672" y="219" key="GitRewordDialog" timestamp="1596619788986">
      <screen x="-1920" y="0" width="1418" height="759" />
    </state>
    <state x="-1672" y="219" key="GitRewordDialog/0.0.1418.759/-1920.0.1418.759@-1920.0.1418.759" timestamp="1596619788986" />
    <state width="1374" height="215" key="GridCell.Tab.0.bottom" timestamp="1595905529781">
      <screen x="0" y="0" width="1418" height="759" />
    </state>
    <state width="1374" height="230" key="GridCell.Tab.0.bottom/-1920.0.1418.759/0.0.1418.759@0.0.1418.759" timestamp="1594696293377" />
    <state width="1333" height="180" key="GridCell.Tab.0.bottom/0.0.1376.733/-1920.0.1376.733@-1920.0.1376.733" timestamp="1593441749273" />
    <state width="1374" height="197" key="GridCell.Tab.0.bottom/0.0.1418.759/-1920.0.1418.759@-1920.0.1418.759" timestamp="1595523739881" />
    <state width="1374" height="264" key="GridCell.Tab.0.bottom/0.0.1418.759/-1920.0.1418.759@0.0.1418.759" timestamp="1594927302250" />
    <state width="1374" height="215" key="GridCell.Tab.0.bottom/0.0.1418.759@0.0.1418.759" timestamp="1595905529781" />
    <state width="1506" height="213" key="GridCell.Tab.0.bottom/0.0.1549.831/-1920.0.1549.831@-1920.0.1549.831" timestamp="1593314421290" />
    <state width="1506" height="213" key="GridCell.Tab.0.bottom/0.0.1549.831/-1920.0.1549.831@0.0.1549.831" timestamp="1593186210871" />
    <state width="1374" height="215" key="GridCell.Tab.0.center" timestamp="1595905529781">
      <screen x="0" y="0" width="1418" height="759" />
    </state>
    <state width="1374" height="230" key="GridCell.Tab.0.center/-1920.0.1418.759/0.0.1418.759@0.0.1418.759" timestamp="1594696293376" />
    <state width="1333" height="180" key="GridCell.Tab.0.center/0.0.1376.733/-1920.0.1376.733@-1920.0.1376.733" timestamp="1593441749273" />
    <state width="1374" height="197" key="GridCell.Tab.0.center/0.0.1418.759/-1920.0.1418.759@-1920.0.1418.759" timestamp="1595523739881" />
    <state width="1374" height="264" key="GridCell.Tab.0.center/0.0.1418.759/-1920.0.1418.759@0.0.1418.759" timestamp="1594927302249" />
    <state width="1374" height="215" key="GridCell.Tab.0.center/0.0.1418.759@0.0.1418.759" timestamp="1595905529781" />
    <state width="1506" height="213" key="GridCell.Tab.0.center/0.0.1549.831/-1920.0.1549.831@-1920.0.1549.831" timestamp="1593314421290" />
    <state width="1506" height="213" key="GridCell.Tab.0.center/0.0.1549.831/-1920.0.1549.831@0.0.1549.831" timestamp="1593186210870" />
    <state width="1374" height="215" key="GridCell.Tab.0.left" timestamp="1595905529781">
      <screen x="0" y="0" width="1418" height="759" />
    </state>
    <state width="1374" height="230" key="GridCell.Tab.0.left/-1920.0.1418.759/0.0.1418.759@0.0.1418.759" timestamp="1594696293376" />
    <state width="1333" height="180" key="GridCell.Tab.0.left/0.0.1376.733/-1920.0.1376.733@-1920.0.1376.733" timestamp="1593441749273" />
    <state width="1374" height="197" key="GridCell.Tab.0.left/0.0.1418.759/-1920.0.1418.759@-1920.0.1418.759" timestamp="1595523739881" />
    <state width="1374" height="264" key="GridCell.Tab.0.left/0.0.1418.759/-1920.0.1418.759@0.0.1418.759" timestamp="1594927302249" />
    <state width="1374" height="215" key="GridCell.Tab.0.left/0.0.1418.759@0.0.1418.759" timestamp="1595905529781" />
    <state width="1506" height="213" key="GridCell.Tab.0.left/0.0.1549.831/-1920.0.1549.831@-1920.0.1549.831" timestamp="1593314421290" />
    <state width="1506" height="213" key="GridCell.Tab.0.left/0.0.1549.831/-1920.0.1549.831@0.0.1549.831" timestamp="1593186210870" />
    <state width="1374" height="215" key="GridCell.Tab.0.right" timestamp="1595905529781">
      <screen x="0" y="0" width="1418" height="759" />
    </state>
    <state width="1374" height="230" key="GridCell.Tab.0.right/-1920.0.1418.759/0.0.1418.759@0.0.1418.759" timestamp="1594696293377" />
    <state width="1333" height="180" key="GridCell.Tab.0.right/0.0.1376.733/-1920.0.1376.733@-1920.0.1376.733" timestamp="1593441749273" />
    <state width="1374" height="197" key="GridCell.Tab.0.right/0.0.1418.759/-1920.0.1418.759@-1920.0.1418.759" timestamp="1595523739881" />
    <state width="1374" height="264" key="GridCell.Tab.0.right/0.0.1418.759/-1920.0.1418.759@0.0.1418.759" timestamp="1594927302250" />
    <state width="1374" height="215" key="GridCell.Tab.0.right/0.0.1418.759@0.0.1418.759" timestamp="1595905529781" />
    <state width="1506" height="213" key="GridCell.Tab.0.right/0.0.1549.831/-1920.0.1549.831@-1920.0.1549.831" timestamp="1593314421290" />
    <state width="1506" height="213" key="GridCell.Tab.0.right/0.0.1549.831/-1920.0.1549.831@0.0.1549.831" timestamp="1593186210871" />
    <state width="1374" height="215" key="GridCell.Tab.1.bottom" timestamp="1595905531295">
      <screen x="0" y="0" width="1418" height="759" />
    </state>
    <state width="1374" height="230" key="GridCell.Tab.1.bottom/-1920.0.1418.759/0.0.1418.759@0.0.1418.759" timestamp="1594696293377" />
    <state width="1333" height="262" key="GridCell.Tab.1.bottom/0.0.1376.733/-1920.0.1376.733@-1920.0.1376.733" timestamp="1593439781602" />
    <state width="1374" height="197" key="GridCell.Tab.1.bottom/0.0.1418.759/-1920.0.1418.759@-1920.0.1418.759" timestamp="1595523739881" />
    <state width="1374" height="264" key="GridCell.Tab.1.bottom/0.0.1418.759/-1920.0.1418.759@0.0.1418.759" timestamp="1594927302250" />
    <state width="1374" height="215" key="GridCell.Tab.1.bottom/0.0.1418.759@0.0.1418.759" timestamp="1595905531295" />
    <state width="1374" height="215" key="GridCell.Tab.1.center" timestamp="1595905531295">
      <screen x="0" y="0" width="1418" height="759" />
    </state>
    <state width="1374" height="230" key="GridCell.Tab.1.center/-1920.0.1418.759/0.0.1418.759@0.0.1418.759" timestamp="1594696293377" />
    <state width="1333" height="262" key="GridCell.Tab.1.center/0.0.1376.733/-1920.0.1376.733@-1920.0.1376.733" timestamp="1593439781601" />
    <state width="1374" height="197" key="GridCell.Tab.1.center/0.0.1418.759/-1920.0.1418.759@-1920.0.1418.759" timestamp="1595523739881" />
    <state width="1374" height="264" key="GridCell.Tab.1.center/0.0.1418.759/-1920.0.1418.759@0.0.1418.759" timestamp="1594927302250" />
    <state width="1374" height="215" key="GridCell.Tab.1.center/0.0.1418.759@0.0.1418.759" timestamp="1595905531295" />
    <state width="1374" height="215" key="GridCell.Tab.1.left" timestamp="1595905531295">
      <screen x="0" y="0" width="1418" height="759" />
    </state>
    <state width="1374" height="230" key="GridCell.Tab.1.left/-1920.0.1418.759/0.0.1418.759@0.0.1418.759" timestamp="1594696293377" />
    <state width="1333" height="262" key="GridCell.Tab.1.left/0.0.1376.733/-1920.0.1376.733@-1920.0.1376.733" timestamp="1593439781601" />
    <state width="1374" height="197" key="GridCell.Tab.1.left/0.0.1418.759/-1920.0.1418.759@-1920.0.1418.759" timestamp="1595523739881" />
    <state width="1374" height="264" key="GridCell.Tab.1.left/0.0.1418.759/-1920.0.1418.759@0.0.1418.759" timestamp="1594927302250" />
    <state width="1374" height="215" key="GridCell.Tab.1.left/0.0.1418.759@0.0.1418.759" timestamp="1595905531295" />
    <state width="1374" height="215" key="GridCell.Tab.1.right" timestamp="1595905531295">
      <screen x="0" y="0" width="1418" height="759" />
    </state>
    <state width="1374" height="230" key="GridCell.Tab.1.right/-1920.0.1418.759/0.0.1418.759@0.0.1418.759" timestamp="1594696293377" />
    <state width="1333" height="262" key="GridCell.Tab.1.right/0.0.1376.733/-1920.0.1376.733@-1920.0.1376.733" timestamp="1593439781601" />
    <state width="1374" height="197" key="GridCell.Tab.1.right/0.0.1418.759/-1920.0.1418.759@-1920.0.1418.759" timestamp="1595523739881" />
    <state width="1374" height="264" key="GridCell.Tab.1.right/0.0.1418.759/-1920.0.1418.759@0.0.1418.759" timestamp="1594927302250" />
    <state width="1374" height="215" key="GridCell.Tab.1.right/0.0.1418.759@0.0.1418.759" timestamp="1595905531295" />
    <state x="260" y="23" key="SettingsEditor" timestamp="1597457167617">
      <screen x="0" y="0" width="1418" height="759" />
    </state>
    <state x="-1668" y="22" key="SettingsEditor/0.0.1376.733/-1920.0.1376.733@-1920.0.1376.733" timestamp="1593438931550" />
    <state x="260" y="23" key="SettingsEditor/0.0.1418.759/-1920.0.1418.759@0.0.1418.759" timestamp="1593613309534" />
    <state x="260" y="23" key="SettingsEditor/0.0.1418.759@0.0.1418.759" timestamp="1597457167617" />
    <state x="282" y="59" key="SettingsEditor/0.0.1536.824/-1920.0.1920.1040@0.0.1536.824" timestamp="1593351731408" />
    <state x="-1636" y="60" key="SettingsEditor/0.0.1549.831/-1920.0.1549.831@-1920.0.1549.831" timestamp="1593190829645" />
    <state x="284" y="60" key="SettingsEditor/0.0.1549.831/-1920.0.1549.831@0.0.1549.831" timestamp="1592842327159" />
    <state x="301" y="112" key="Vcs.Push.Dialog.v2" timestamp="1598715924497">
      <screen x="0" y="0" width="1418" height="759" />
    </state>
    <state x="-1619" y="112" key="Vcs.Push.Dialog.v2/0.0.1418.759/-1920.0.1418.759@-1920.0.1418.759" timestamp="1596554470997" />
    <state x="301" y="112" key="Vcs.Push.Dialog.v2/0.0.1418.759@0.0.1418.759" timestamp="1597767518363" />
    <state x="301" y="112" key="Vcs.Push.Dialog.v2/1920.0.1418.759/0.0.1418.759@0.0.1418.759" timestamp="1598715924497" />
    <state x="2221" y="112" key="Vcs.Push.Dialog.v2/1920.0.1418.759/0.0.1418.759@1920.0.1418.759" timestamp="1597976065777" />
    <state width="715" height="386" key="XDebugger.FullValuePopup" timestamp="1595068599247">
      <screen x="-1920" y="0" width="1418" height="759" />
    </state>
    <state width="715" height="386" key="XDebugger.FullValuePopup/0.0.1418.759/-1920.0.1418.759@-1920.0.1418.759" timestamp="1595068599247" />
    <state x="0" y="0" width="1182" height="566" maximized="true" key="dock-window-1" timestamp="1594998015773">
      <screen x="0" y="0" width="1418" height="759" />
    </state>
    <state x="0" y="0" width="1182" height="566" maximized="true" key="dock-window-1/0.0.1418.759/-1920.0.1418.759@-1920.0.1418.759" timestamp="1594998015773" />
    <state x="184" y="0" width="826" height="566" maximized="true" key="dock-window-2" timestamp="1595003496729">
      <screen x="0" y="0" width="1418" height="759" />
    </state>
    <state x="184" y="0" width="826" height="566" maximized="true" key="dock-window-2/0.0.1418.759/-1920.0.1418.759@-1920.0.1418.759" timestamp="1595003496729" />
    <state x="0" y="0" width="1432" height="766" key="dock-window-3" timestamp="1595006901179">
      <screen x="0" y="0" width="1418" height="759" />
    </state>
    <state x="0" y="0" width="1432" height="766" key="dock-window-3/0.0.1418.759/-1920.0.1418.759@-1920.0.1418.759" timestamp="1595006901179" />
    <state x="0" y="48" width="1165" height="566" maximized="true" key="dock-window-4" timestamp="1595040548003">
      <screen x="0" y="0" width="1418" height="759" />
    </state>
    <state x="0" y="48" width="1165" height="566" maximized="true" key="dock-window-4/0.0.1418.759/-1920.0.1418.759@-1920.0.1418.759" timestamp="1595040548003" />
    <state x="400" y="139" width="672" height="620" key="search.everywhere.popup" timestamp="1597603021458">
      <screen x="0" y="0" width="1418" height="759" />
    </state>
    <state x="-1520" y="139" width="672" height="620" key="search.everywhere.popup/-1920.0.1418.759/0.0.1418.759@-1920.0.1418.759" timestamp="1594738083863" />
    <state x="-1520" y="139" width="672" height="620" key="search.everywhere.popup/0.0.1418.759/-1920.0.1418.759@-1920.0.1418.759" timestamp="1595051001279" />
    <state x="400" y="139" width="672" height="620" key="search.everywhere.popup/0.0.1418.759@0.0.1418.759" timestamp="1597603021458" />
    <state x="-1483" y="152" width="672" height="678" key="search.everywhere.popup/0.0.1549.831/-1920.0.1549.831@-1920.0.1549.831" timestamp="1593190990022" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
          <url>file://$PROJECT_DIR$/LeetCode/0007. Reverse Integer.py</url>
          <line>2</line>
          <option name="timeStamp" value="1" />
        </line-breakpoint>
        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
          <url>file://$PROJECT_DIR$/LeetCode/1431. Kids With the Greatest Number of Candies.py</url>
          <line>11</line>
          <option name="timeStamp" value="2" />
        </line-breakpoint>
        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
          <url>file://$PROJECT_DIR$/LeetCode/1389. Create Target Array in the Given Order.py</url>
          <line>27</line>
          <option name="timeStamp" value="4" />
        </line-breakpoint>
        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
          <url>file://$PROJECT_DIR$/LeetCode/1266. Minimum Time Visiting All Points.py</url>
          <line>12</line>
          <option name="timeStamp" value="6" />
        </line-breakpoint>
        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
          <url>file://$PROJECT_DIR$/LeetCode/1252. Cells with Odd Values in a Matrix.py</url>
          <line>26</line>
          <option name="timeStamp" value="7" />
        </line-breakpoint>
        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
          <url>file://$PROJECT_DIR$/LeetCode/1252. Cells with Odd Values in a Matrix.py</url>
          <line>16</line>
          <option name="timeStamp" value="8" />
        </line-breakpoint>
        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
          <url>file://$USER_HOME$/Desktop/zhizhi/task1/canny2.py</url>
          <line>175</line>
          <option name="timeStamp" value="10" />
        </line-breakpoint>
        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
          <url>file://$PROJECT_DIR$/../../DevApps/Anaconda3/Lib/site-packages/PIL/ImageStat.py</url>
          <line>131</line>
          <option name="timeStamp" value="20" />
        </line-breakpoint>
        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
          <url>file://$PROJECT_DIR$/LeetCode/1021. Remove Outermost Parentheses.py</url>
          <line>11</line>
          <option name="timeStamp" value="21" />
        </line-breakpoint>
        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
          <url>file://$PROJECT_DIR$/LeetCode/0067. Add Binary.py</url>
          <line>24</line>
          <option name="timeStamp" value="22" />
        </line-breakpoint>
        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
          <url>file://$PROJECT_DIR$/LeetCode/!0107. Binary Tree Level Order Traversal II.cpp</url>
          <line>32</line>
          <option name="timeStamp" value="27" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
</project>